mutate( emoji = str_sub(emoji, end = 1)) %>%
mutate( emoji_name = str_remove(emoji_name, ":.*")) %>%
count(emoji, emoji_name)
plotEmojis <- temp %>%
unnest(c(emoji, emoji_name)) %>%
mutate( emoji = str_sub(emoji, end = 1)) %>%
mutate( emoji_name = str_remove(emoji_name, ":.*")) %>%
dplyr::count(emoji, emoji_name)
View(plotEmojis)
plotEmojis <- temp %>%
unnest(c(emoji, emoji_name)) %>%
mutate( emoji = str_sub(emoji, end = 1)) %>%
mutate( emoji_name = str_remove(emoji_name, ":.*")) %>%
dplyr::count(emoji, emoji_name) %>%
# PLOT TOP 30 EMOJIS
top_n(20, n) %>%
arrange(desc(n)) %>% # CREA UNA URL DE IMAGEN CON EL UNICODE DE EMOJI
mutate( emoji_url = map_chr(emoji,
~paste0( "https://abs.twimg.com/emoji/v2/72x72/", as.hexmode(utf8ToInt(.x)),".png"))
)
# PLOT OF THE RANKING OF MOST USED EMOJIS
plotEmojis[1:10,] %>%
ggplot(aes(x=reorder(emoji_name, n), y=n)) +
geom_col(aes(fill=n), show.legend = FALSE, width = .2) +
geom_point(aes(color=n), show.legend = FALSE, size = 3) +
geom_image(aes(image=emoji_url), size=.045) +
scale_fill_gradient(low="#2b83ba",high="#d7191c") +
scale_color_gradient(low="#2b83ba",high="#d7191c") +
ylab("Emoji Count") +
xlab("EMoji") +
ggtitle("Top 10 Emojis") +
coord_flip() +
theme_minimal() +
theme()
# PLOT OF THE RANKING OF MOST USED EMOJIS
plotEmojis %>%
ggplot(aes(x=reorder(emoji_name, n), y=n)) +
geom_col(aes(fill=n), show.legend = FALSE, width = .2) +
geom_point(aes(color=n), show.legend = FALSE, size = 3) +
geom_image(aes(image=emoji_url), size=.045) +
scale_fill_gradient(low="#2b83ba",high="#d7191c") +
scale_color_gradient(low="#2b83ba",high="#d7191c") +
ylab("Emoji Count") +
xlab("EMoji") +
ggtitle("Top 10 Emojis") +
coord_flip() +
theme_minimal() +
theme()
tweets_sample<- as.data.frame(df$tweet)
names(tweets_sample) <- "text"
temp<-lookup_emoji.data.frame(tweets_sample)
library(ggimage)# EMOJI RANKING
plotEmojis <- temp %>%
unnest(c(emoji, emoji_name)) %>%
mutate( emoji = str_sub(emoji, end = 1)) %>%
mutate( emoji_name = str_remove(emoji_name, ":.*")) %>%
dplyr::count(emoji, emoji_name) %>%
# PLOT TOP 30 EMOJIS
top_n(20, n) %>%
arrange(desc(n)) %>% # CREA UNA URL DE IMAGEN CON EL UNICODE DE EMOJI
mutate( emoji_url = map_chr(emoji,
~paste0( "https://abs.twimg.com/emoji/v2/72x72/", as.hexmode(utf8ToInt(.x)),".png"))
)
# PLOT OF THE RANKING OF MOST USED EMOJIS
plotEmojis %>%
ggplot(aes(x=reorder(emoji_name, n), y=n)) +
geom_col(aes(fill=n), show.legend = FALSE, width = .2) +
geom_point(aes(color=n), show.legend = FALSE, size = 3) +
geom_image(aes(image=emoji_url), size=.045) +
scale_fill_gradient(low="#2b83ba",high="#d7191c") +
scale_color_gradient(low="#2b83ba",high="#d7191c") +
ylab("Emoji Count") +
xlab("EMoji") +
ggtitle("Top 10 Emojis") +
coord_flip() +
theme_minimal() +
theme()
View(emojis)
emoji_data <- rwhatsapp::emojis %>% # data built into package
mutate(hex_runes1 = gsub("\\sU\\+", "-", hex_runes)) %>% # replace whitespace & U+ with - to creat urls
mutate(emoji_url = paste0("https://abs.twimg.com/emoji/v2/72x72/",
tolower(hex_runes1), ".png"))
View(emojis)
df<- df[!duplicated(df$tweet),]
tweets_sample<- as.data.frame(df$tweet)
names(tweets_sample) <- "text"
temp<-lookup_emoji.data.frame(tweets_sample)
library(ggimage)# EMOJI RANKING
plotEmojis <- temp %>%
unnest(c(emoji, emoji_name)) %>%
mutate( emoji = str_sub(emoji, end = 1)) %>%
mutate( emoji_name = str_remove(emoji_name, ":.*")) %>%
dplyr::count(emoji, emoji_name) %>%
# PLOT TOP 30 EMOJIS
top_n(20, n) %>%
arrange(desc(n)) %>% # CREA UNA URL DE IMAGEN CON EL UNICODE DE EMOJI
mutate( emoji_url = map_chr(emoji,
~paste0( "https://abs.twimg.com/emoji/v2/72x72/", as.hexmode(utf8ToInt(.x)),".png"))
)
# PLOT OF THE RANKING OF MOST USED EMOJIS
plotEmojis %>%
ggplot(aes(x=reorder(emoji_name, n), y=n)) +
geom_col(aes(fill=n), show.legend = FALSE, width = .2) +
geom_point(aes(color=n), show.legend = FALSE, size = 3) +
geom_image(aes(image=emoji_url), size=.045) +
scale_fill_gradient(low="#2b83ba",high="#d7191c") +
scale_color_gradient(low="#2b83ba",high="#d7191c") +
ylab("Emoji Count") +
xlab("EMoji") +
ggtitle("Top 10 Emojis") +
coord_flip() +
theme_minimal() +
theme()
View(plotEmojis)
plotEmojis <- temp %>%
unnest(c(emoji, emoji_name)) %>%
mutate( emoji = str_sub(emoji, end = 1)) %>%
mutate( emoji_name = str_remove(emoji_name, ":.*")) %>%
dplyr::count(emoji, emoji_name) %>%
# PLOT TOP 30 EMOJIS
top_n(15, n) %>%
arrange(desc(n)) %>% # CREA UNA URL DE IMAGEN CON EL UNICODE DE EMOJI
mutate( emoji_url = map_chr(emoji,
~paste0( "https://abs.twimg.com/emoji/v2/72x72/", as.hexmode(utf8ToInt(.x)),".png"))
)
# PLOT OF THE RANKING OF MOST USED EMOJIS
plotEmojis %>%
ggplot(aes(x=reorder(emoji_name, n), y=n)) +
geom_col(aes(fill=n), show.legend = FALSE, width = .2) +
geom_point(aes(color=n), show.legend = FALSE, size = 3) +
geom_image(aes(image=emoji_url), size=.045) +
scale_fill_gradient(low="#2b83ba",high="#d7191c") +
scale_color_gradient(low="#2b83ba",high="#d7191c") +
ylab("Emoji Count") +
xlab("EMoji") +
ggtitle("Top 10 Emojis") +
coord_flip() +
theme_minimal() +
theme()
View(plotEmojis)
plotEmojis <- temp %>%
unnest(c(emoji, emoji_name)) %>%
mutate( emoji = str_sub(emoji, end = 1)) %>%
mutate( emoji_name = str_remove(emoji_name, ":.*")) %>%
dplyr::count(emoji, emoji_name) %>%
# PLOT TOP 30 EMOJIS
top_n(12, n) %>%
arrange(desc(n)) %>% # CREA UNA URL DE IMAGEN CON EL UNICODE DE EMOJI
mutate( emoji_url = map_chr(emoji,
~paste0( "https://abs.twimg.com/emoji/v2/72x72/", as.hexmode(utf8ToInt(.x)),".png"))
)
# PLOT OF THE RANKING OF MOST USED EMOJIS
plotEmojis %>%
ggplot(aes(x=reorder(emoji_name, n), y=n)) +
geom_col(aes(fill=n), show.legend = FALSE, width = .2) +
geom_point(aes(color=n), show.legend = FALSE, size = 3) +
geom_image(aes(image=emoji_url), size=.045) +
scale_fill_gradient(low="#2b83ba",high="#d7191c") +
scale_color_gradient(low="#2b83ba",high="#d7191c") +
ylab("Emoji Count") +
xlab("EMoji") +
ggtitle("Top 10 Emojis") +
coord_flip() +
theme_minimal() +
theme()
library(RCurl)
url.exists("http://google.com")
url.exists(plotEmojis$emoji_url)
x<-url.exists(plotEmojis$emoji_url)
x
View(x)
library(ggimage)# EMOJI RANKING
plotEmojis <- temp %>%
unnest(c(emoji, emoji_name)) %>%
mutate( emoji = str_sub(emoji, end = 1)) %>%
mutate( emoji_name = str_remove(emoji_name, ":.*")) %>%
dplyr::count(emoji, emoji_name) %>%
# PLOT TOP 30 EMOJIS
top_n(50, n) %>%
arrange(desc(n)) %>% # CREA UNA URL DE IMAGEN CON EL UNICODE DE EMOJI
mutate( emoji_url = map_chr(emoji,
~paste0( "https://abs.twimg.com/emoji/v2/72x72/", as.hexmode(utf8ToInt(.x)),".png"))
)
x<-url.exists(plotEmojis$emoji_url)
View(x)
names(tweets_sample) <- "text1"
temp<-lookup_emoji.data.frame(tweets_sample)
View(emoji_data)
View(temp)
temp$emoji[[6]]
length(temp$emoji[[6]])
length(temp$emoji[[2]])
View(temp)
View(temp)
View(temp)
map_chr(temp$emoji_name,~length(.x))
table(map_chr(temp$emoji_name,~length(.x)))
countdf<-table(map_chr(temp$emoji_name,~length(.x)))table(map_chr(temp$emoji_name,~length(.x)))
countdf<-table(map_chr(temp$emoji_name,~length(.x)))
ggplot(countdf)
barplot(countdf)
countdf<-table(map_chr(temp$emoji_name,~as.integer(length(.x))))
barplot(countdf)
barplot(sort(countdf))
barplot(sort(countdf,decreasing = TRUE))
runApp()
runGitHub('text-network-app','sudhir-voleti')
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
df <- read.csv("manutd.csv",encoding = "UTF-8")
df<- df[!duplicated(df$tweet),]
tweets_sample<- as.data.frame(df$tweet)
names(tweets_sample) <- "text"
temp<-lookup_emoji.data.frame(tweets_sample)
#' Lookup emojis from text
#'
#' @description Takes a character string or data.frame with text, looks up all
#'   emoji characters in it and also returns their description. Supports the
#'   full unicode Emoji List v13.0 (see \link{emojis}).
#'
#' @param x A character vector or data.frame.
#' @param text_field the character name or numeric index of the source
#'   `data.frame` indicating the variable to be read in as text.
#' @param ... not currently used.
#'
#' @importFrom tibble tibble add_column
#' @importFrom stringi stri_replace_all_regex stri_replace_all_charclass
#'   stri_split_boundaries
#' @export
lookup_emoji <- function(x, ...) {
UseMethod("lookup_emoji")
}
#' @rdname lookup_emoji
#' @export
lookup_emoji.data.frame <- function(x, text_field = "text", ...) {
id <- seq_along(x[[text_field]])
text <- x[[text_field]]
emojis <- lookup_emoji(text)
emojis$id <- NULL
emojis$text <- NULL
return(tibble::add_column(x, emojis))
}
#' @rdname lookup_emoji
#' @export
lookup_emoji.character <- function(x, ...) {
id <- seq_along(x)
text <- stri_replace_all_charclass(x, "[[:punct:][:whitespace:]]", "")
l <- stri_split_boundaries(text, type = "character")
lookup <- tibble(id = rep(id, sapply(l, length)), emoji = unlist(l))
lookup <- add_column(lookup,
emoji_name = rwhatsapp::emojis$name[
match(lookup$emoji,
rwhatsapp::emojis$emoji)
])
lookup <- lookup[!is.na(lookup$emoji_name), ]
lookup <- tibble(id = unique(lookup$id),
emoji = unname(split(lookup$emoji, lookup$id)),
emoji_name = unname(split(lookup$emoji_name, lookup$id)))
out <- tibble(
id = id,
text = x,
emoji = lookup$emoji[match(id, lookup$id)],
emoji_name = lookup$emoji_name[match(id, lookup$id)]
)
return(out)
}
temp<-lookup_emoji.data.frame(tweets_sample)
View(tweets_sample)
library('stringi')
temp<-lookup_emoji.data.frame(tweets_sample)
df <- read.csv("manutd_tweets.csv",encoding = "UTF-8")
df<- df[!duplicated(df$tweet),]
df <- read.csv("manutd_tweets.csv",encoding = "UTF-8")
df <- read.csv("manutd_tweets.csv",encoding = "UTF-8",header = FALSE)
View(df)
df <- read.csv("manutd_tweets.csv",encoding = "UTF-8",header = FALSE)
View(df)
df<- df[!duplicated(df),]
df<- as.data.frame(df[!duplicated(df),])
df<- as.data.frame(df[!duplicated(df),])
df <- read.csv("manutd_tweets.csv",encoding = "UTF-8",header = FALSE)
df <- unique(df)
View(df)
names(df) <- "text"
View(df)
temp<-lookup_emoji.data.frame(df)
runApp()
rwhatsapp::emojis
plotEmojis <- temp %>%
unnest(c(emoji, emoji_name)) %>%
mutate( emoji = str_sub(emoji, end = 1)) %>%
mutate( emoji_name = str_remove(emoji_name, ":.*")) %>%
dplyr::count(emoji, emoji_name) %>%
# PLOT TOP 30 EMOJIS
top_n(50, n) %>%
arrange(desc(n)) %>% # CREA UNA URL DE IMAGEN CON EL UNICODE DE EMOJI
mutate( emoji_url = map_chr(emoji,
~paste0( "https://abs.twimg.com/emoji/v2/72x72/", as.hexmode(utf8ToInt(.x)),".png"))
)
View(plotEmojis)
View(temp)
View(plotEmojis)
temp %>%
unnest(c(emoji, emoji_name)) %>%
mutate( emoji = str_sub(emoji, end = 1)) %>%
mutate( emoji_name = str_remove(emoji_name, ":.*")) %>%
dplyr::count(emoji, emoji_name)
runApp()
runApp()
plotEmojis %>%
ggplot(aes(x=reorder(emoji_name, n), y=n)) +
geom_col(aes(fill=n), show.legend = FALSE, width = .2) +
geom_point(aes(color=n), show.legend = FALSE, size = 3) +
geom_image(aes(image=emoji_url), size=.045) +
scale_fill_gradient(low="#2b83ba",high="#d7191c") +
scale_color_gradient(low="#2b83ba",high="#d7191c") +
ylab("Emoji Count") +
xlab("EMoji") +
ggtitle("Top 10 Emojis") +
coord_flip() +
theme_minimal() +
theme()
plotEmojis <- temp %>%
unnest(c(emoji, emoji_name)) %>%
mutate( emoji = str_sub(emoji, end = 1)) %>%
mutate( emoji_name = str_remove(emoji_name, ":.*")) %>%
dplyr::count(emoji, emoji_name) %>%
# PLOT TOP 30 EMOJIS
top_n(30, n) %>%
arrange(desc(n)) %>% # CREA UNA URL DE IMAGEN CON EL UNICODE DE EMOJI
mutate( emoji_url = map_chr(emoji,
~paste0( "https://abs.twimg.com/emoji/v2/72x72/", as.hexmode(utf8ToInt(.x)),".png"))
)
# PLOT OF THE RANKING OF MOST USED EMOJIS
plotEmojis %>%
ggplot(aes(x=reorder(emoji_name, n), y=n)) +
geom_col(aes(fill=n), show.legend = FALSE, width = .2) +
geom_point(aes(color=n), show.legend = FALSE, size = 3) +
geom_image(aes(image=emoji_url), size=.045) +
scale_fill_gradient(low="#2b83ba",high="#d7191c") +
scale_color_gradient(low="#2b83ba",high="#d7191c") +
ylab("Emoji Count") +
xlab("EMoji") +
ggtitle("Top 10 Emojis") +
coord_flip() +
theme_minimal() +
theme()
plotEmojis <- temp %>%
unnest(c(emoji, emoji_name)) %>%
mutate( emoji = str_sub(emoji, end = 1)) %>%
mutate( emoji_name = str_remove(emoji_name, ":.*")) %>%
dplyr::count(emoji, emoji_name) %>%
# PLOT TOP 30 EMOJIS
top_n(20, n) %>%
arrange(desc(n)) %>% # CREA UNA URL DE IMAGEN CON EL UNICODE DE EMOJI
mutate( emoji_url = map_chr(emoji,
~paste0( "https://abs.twimg.com/emoji/v2/72x72/", as.hexmode(utf8ToInt(.x)),".png"))
)
# PLOT OF THE RANKING OF MOST USED EMOJIS
plotEmojis %>%
ggplot(aes(x=reorder(emoji_name, n), y=n)) +
geom_col(aes(fill=n), show.legend = FALSE, width = .2) +
geom_point(aes(color=n), show.legend = FALSE, size = 3) +
geom_image(aes(image=emoji_url), size=.045) +
scale_fill_gradient(low="#2b83ba",high="#d7191c") +
scale_color_gradient(low="#2b83ba",high="#d7191c") +
ylab("Emoji Count") +
xlab("EMoji") +
ggtitle("Top 10 Emojis") +
coord_flip() +
theme_minimal() +
theme()
plotEmojis <- temp %>%
unnest(c(emoji, emoji_name)) %>%
mutate( emoji = str_sub(emoji, end = 1)) %>%
mutate( emoji_name = str_remove(emoji_name, ":.*")) %>%
dplyr::count(emoji, emoji_name) %>%
# PLOT TOP 30 EMOJIS
top_n(10, n) %>%
arrange(desc(n)) %>% # CREA UNA URL DE IMAGEN CON EL UNICODE DE EMOJI
mutate( emoji_url = map_chr(emoji,
~paste0( "https://abs.twimg.com/emoji/v2/72x72/", as.hexmode(utf8ToInt(.x)),".png"))
)
# PLOT OF THE RANKING OF MOST USED EMOJIS
plotEmojis %>%
ggplot(aes(x=reorder(emoji_name, n), y=n)) +
geom_col(aes(fill=n), show.legend = FALSE, width = .2) +
geom_point(aes(color=n), show.legend = FALSE, size = 3) +
geom_image(aes(image=emoji_url), size=.045) +
scale_fill_gradient(low="#2b83ba",high="#d7191c") +
scale_color_gradient(low="#2b83ba",high="#d7191c") +
ylab("Emoji Count") +
xlab("EMoji") +
ggtitle("Top 10 Emojis") +
coord_flip() +
theme_minimal() +
theme()
# PLOT OF THE RANKING OF MOST USED EMOJIS
plotEmojis %>%
ggplot(aes(x=reorder(emoji_name, n), y=n)) +
geom_col(aes(fill=n), show.legend = FALSE, width = .2) +
geom_point(aes(color=n), show.legend = FALSE, size = 3) +
geom_image(aes(image=emoji_url), size=.045) +
scale_fill_gradient(low="#2b83ba",high="#d7191c") +
scale_color_gradient(low="#2b83ba",high="#d7191c") +
ylab("Emoji Count") +
xlab("EMoji") +
ggtitle("Top 10 Emojis") +
coord_flip() #+
plotEmojis %>%
ggplot(aes(x=reorder(emoji_name, n), y=n)) +
geom_col(aes(fill=n), show.legend = FALSE, width = .2) +
geom_point(aes(color=n), show.legend = FALSE, size = 3) +
geom_image(aes(image=emoji_url), size=.045) +
scale_fill_gradient(low="#2b83ba",high="#d7191c") +
scale_color_gradient(low="#2b83ba",high="#d7191c") +
ylab("Emoji Count") +
xlab("EMoji") +
ggtitle("Top 10 Emojis") +
coord_flip() #+
#theme_minimal() +
theme()
runApp()
countdf<-table(map_chr(temp$emoji_name,~as.integer(length(.x))))
View(countdf)
# 1: uniform color. Color is for the border, fill is for the inside
ggplot(countdf, aes(x=as.factor(Var1) )) +
geom_bar(color="blue", fill=rgb(0.1,0.4,0.5,0.7) )
View(temp)
?map_chr
countdf<-table(map(temp$emoji_name,~as.integer(length(.x))))
map(temp$emoji_name,as.integer(length(.x)))
View(temp)
vec_length <- function(x) {
return(length(x))
}
lapply(temp$emoji_name, function(x) sapply(x, vec_length))
# 1: uniform color. Color is for the border, fill is for the inside
ggplot(countdf, aes(x=as.factor(Var1) )) +
geom_bar(color="blue", fill=rgb(0.1,0.4,0.5,0.7) )
class(countdf)
as.data.frame(countdf)
countdf<-table(map(temp$emoji_name,as.integer(length(.x))))
countdf<-table(map_chr(temp$emoji_name,~as.integer(length(.x))))
class(countdf)
countdf <- as.data.frame(countdf)
View(countdf)
View(countdf)
View(countdf)
names(countdf) <- c("count","freq")
# 1: uniform color. Color is for the border, fill is for the inside
ggplot(countdf, aes(x=as.factor(count) )) +
geom_bar(color="blue", fill=rgb(0.1,0.4,0.5,0.7) )
View(countdf)
# 1: uniform color. Color is for the border, fill is for the inside
ggplot(countdf, aes(x=as.factor(count) )) +
geom_bar(color="blue",stat = "identity" )
# 1: uniform color. Color is for the border, fill is for the inside
ggplot(countdf, aes(x=as.factor(count),freq)) +
geom_bar(color="blue",stat = "identity" )
# 1: uniform color. Color is for the border, fill is for the inside
ggplot(countdf, aes(x=as.factor(count),freq)) +
geom_bar(fill="blue",stat = "identity" )
# 1: uniform color. Color is for the border, fill is for the inside
ggplot(countdf, aes(x=as.factor(count),freq)) +
geom_bar(fill="green",stat = "identity" )
# 1: uniform color. Color is for the border, fill is for the inside
ggplot(countdf, aes(x=as.factor(count),freq)) +
geom_bar(fill=rgb(0.1,0.4,0.5,0.7),stat = "identity" )
# 1: uniform color. Color is for the border, fill is for the inside
ggplot(countdf, aes(x=count,freq)) +
geom_bar(fill=rgb(0.1,0.4,0.5,0.7),stat = "identity" )
View(countdf)
countdf <- countdf[order(countdf$count),]
View(countdf)
str(countdf)
countdf$count <- as.integer(countdf$count)
countdf <- countdf[order(countdf$count),]
# 1: uniform color. Color is for the border, fill is for the inside
ggplot(countdf, aes(x=count,freq)) +
geom_bar(fill=rgb(0.1,0.4,0.5,0.7),stat = "identity" )
# 1: uniform color. Color is for the border, fill is for the inside
ggplot(countdf, aes(x=as.factor(count),freq)) +
geom_bar(fill=rgb(0.1,0.4,0.5,0.7),stat = "identity" )
# 1: uniform color. Color is for the border, fill is for the inside
ggplot(countdf, aes(x=as.factor(count),freq)) +
geom_bar(fill=rgb(0.1,0.4,0.5,0.7),stat = "identity" )%>%xlab("No of emojis per tweet") %>%ylab("count")
# 1: uniform color. Color is for the border, fill is for the inside
ggplot(countdf, aes(x=as.factor(count),freq)) +
geom_bar(fill=rgb(0.1,0.4,0.5,0.7),stat = "identity" )%>%xlab("No of emojis per tweet") %>% ylab("count")
# 1: uniform color. Color is for the border, fill is for the inside
ggplot(countdf, aes(x=as.factor(count),freq)) +
geom_bar(fill=rgb(0.1,0.4,0.5,0.7),stat = "identity" )%>%xlab("No of emojis per tweet")
# 1: uniform color. Color is for the border, fill is for the inside
ggplot(countdf, aes(x=as.factor(count),freq)) +
geom_bar(fill=rgb(0.1,0.4,0.5,0.7),stat = "identity" )+xlab("No of emojis per tweet")+ ylab("count")
# 1: uniform color. Color is for the border, fill is for the inside
ggplot(countdf, aes(x=as.factor(count),freq)) +
geom_bar(fill=rgb(0.1,0.4,0.5,0.7),stat = "identity" )+xlab("No of emojis per tweet")+ ylab("count")+title("Emoji Distribution")
# 1: uniform color. Color is for the border, fill is for the inside
ggplot(countdf, aes(x=as.factor(count),freq)) +
geom_bar(fill=rgb(0.1,0.4,0.5,0.7),stat = "identity" )+xlab("No of emojis per tweet")+ ylab("count")+ggtitle("Emoji Distribution")
runApp()
runApp()
runGitHub("text-network-app","sudhir-voleti")
shiny::runApp()
runApp()
source("https://raw.githubusercontent.com/sudhir-voleti/text-network-app/master/dependency-text-network-app.R")
runGitHub("text-network-app","sudhir-voleti")
